Q: In this lesson, you created a middleware function called asyncWrapper. Why?
A: We've created asyncWrapper() function to get rid of try-catch blocks in our controllers bur still be able to use the async-await syntax.

Q: Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    // your code here
  }
  res.status(200).json({ task });
});
A:const { createCustomError } = require("../errors/custom-error");
  const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(createCustomError(`No task with id: ${taskID}`, 404));
  }
  res.status(200).json({ task });
});
